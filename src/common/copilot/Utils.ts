/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

import { createWebpage } from "../../client/power-pages/create/Webpage";
import * as vscode from "vscode";
import path from "path";
let _context: vscode.ExtensionContext;

export function createAiWebpage(_prompt: string):void {
    const yoGenPackagePath = path.join("node_modules", ".bin", "yo");
    const workspaceFolder = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;

    createWebpage(
        _context,
        workspaceFolder,
        yoGenPackagePath,
        _prompt
    )
}

export function getTemplates() {
    const templates = {
        base: `You are a web developer using power portal or power pages platform for development. Power Pages uses liquid as a templating language and Bootstrap v3.3.6. Always give code snippets enclosed within \`+"${"```"}" +\` and never without it.`,

        entityList: `The list gets its data asynchronously, and when it's complete it will trigger an event 'loaded' that your custom JavaScript can listen for and do something with items in the grid. The following code is a sample javascript code: \`+"${"```"}" +\` $(document).ready(function () { $(".entitylist.entity-grid").on("loaded", function () { $(this).children(".view-grid").find("tr").each(function () { // do something with each row $(this).css("background-color", "yellow"); }); }); }); \`+"${"```"}" +\` Find a particular attribute field and get its value to possibly modify the rendering of the value. The following code gets each table cell that contains the value of the accountnumber attribute. Replace accountnumber with an attribute appropriate for your table and view. \`+"${"```"}" +\` $(document).ready(function (){ $(".entitylist.entity-grid").on("loaded", function () { $(this).children(".view-grid").find("td[data-attribute='accountnumber']").each(function (i, e){ var value = $(this).data(value); \`+"${"```"}" +\` // now that you have the value you can do something to the value }); }); });`,

        entityForm: `In a form On click of the Next/Submit button, a function named entityFormClientValidate is executed. You can extend this method to add custom validation logic for example refer the following javascript code: \`+"${"```"}" +\` if (window.jQuery) { (function ($) { if (typeof (entityFormClientValidate) != 'undefined') { var originalValidationFunction = entityFormClientValidate; if (originalValidationFunction && typeof (originalValidationFunction) == 'function') { entityFormClientValidate = function() { originalValidationFunction.apply(this, arguments); // do your custom validation here // return false; // to prevent the form submit you need to return false // end custom validation. return true; }; } } }(window.jQuery)); } To customize the validation of fields on the form you can write something like this: if (window.jQuery) { (function ($) { $(document).ready(function () { if (typeof (Page_Validators) == 'undefined') return; // Create new validator var newValidator = document.createElement('span'); newValidator.style.display = 'none'; newValidator.id = 'emailaddress1Validator'; newValidator.controltovalidate = 'emailaddress1'; newValidator.errormessage = '<a href="#emailaddress1_label" referencecontrolid="emailaddress1" onclick="javascript:scrollToAndFocus(\\"emailaddress1_label\\",\\"emailaddress1\\");return false;">Email is a required field.</a>'; newValidator.validationGroup = ''; // Set this if you have set ValidationGroup on the form newValidator.initialvalue = ''; newValidator.evaluationfunction = function () { var contactMethod = $('#preferredcontactmethodcode').val(); if (contactMethod != 2) return true; // check if contact method is not 'Email'. // only require email address if preferred contact method is email. var value = $('#emailaddress1').val(); if (value == null || value == '') { return false; } else { return true; } }; // Add the new validator to the page validators array: Page_Validators.push(newValidator); }); }(window.jQuery)); } \`+"${"```"}" +\`  Note: The above code is just an example for adding validations to the form. The actual prompt might be different based on the requirement`,

        webPage: "You are an intelligent assistant that helps users build pages in Microsoft Power Pages. The user wants to build a new page. This is the title of their website: 'Woodland Bank'. Use HTML for the body and use Bootstrap grid system. Each row element should look like this: <div data-component-theme=\"portalThemeColor{colorNum}\" class=\"row sectionBlockLayout\" style=\"min-height: auto;\"> where {colorNum} must have a value of 1, 5, or 7. The first row should not have {colorNum} value of 1. There should be a container immediately within each row like this: <div class=\"container\">. Each column element should look like this: <div class=\"col-md-{colNum} columnBlockLayout\"> where {colNum} must have a value of 4, 6, 8, or 12. Once the columns reach 12, start a new row. The \"min-height\" property must be defined for each row and column. Each row must have the following styles=\"display: flex; flex-wrap: wrap;\". Each column must have the following styles=\"flex-grow: 1; display: flex; flex-direction: column;\". These are the standard elements available to choose from: [ <h1>, <h2>, <h3>, <h4>, <h5>, <p>, <img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\">, <button class=\"button1\">, <button class=\"button2\"> ]. Each image must have a descriptive alt text and a src attribute. The hero section should have a background image. Use spacers to add spacing between elements within a column. Each spacer should look like this: <div class=\"row sectionBlockLayout\" style=\"min-height: {space}px;\"> where {space} is a number greater than or equal to 15. Here are some examples of row elements: [<div data-component-theme=\"portalThemeColor7\" class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: 50%; background-image: linear-gradient(0deg, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)), url(''); background-position: center center; background-repeat: no-repeat; background-size: cover;\"><div class=\"container\"><div class=\"col-md-12 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column; margin: 120px 0px;\"><h1 style=\"text-align: center; color: var(--portalThemeColor8);\">...</h1><div class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: 15px;\"></div><h4 style=\"text-align: center; color: var(--portalThemeColor8);\">...</h4><div class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: 15px;\"></div><button class=\"button1\" style=\"text-align: center; margin-left: auto; margin-right: auto;\">...</button></div></div></div>,<div data-component-theme=\"portalThemeColor5\" class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: auto;\"><div class=\"container\"><div class=\"col-md-8 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column; margin: 30px 0px; padding: 30px;\"><img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\"></div><div class=\"col-md-4 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column; margin: 30px 0px; padding: 30px;\"><h2>...</h2><p>...</p><div class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: 15px;\"></div><button class=\"button2\">...</button></div></div></div>,<div data-component-theme=\"portalThemeColor5\" class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: auto;\"><div class=\"container\"><div class=\"col-md-4 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column; margin: 30px 0px; padding: 30px;\"><h2>...</h2><p>...</p><div class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: 15px;\"></div><button class=\"button2\">...</button></div><div class=\"col-md-8 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column; margin: 30px 0px; padding: 30px;\"><img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\"></div></div></div>,<div data-component-theme=\"portalThemeColor7\" class=\"row sectionBlockLayout\" style=\"display: flex; flex-wrap: wrap; min-height: auto;\"><div class=\"container\"><div class=\"col-md-4 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column;\"><img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\"><h2 style=\"text-align: center;\">...</h2><p style=\"text-align: center;\">...</p></div><div class=\"col-md-4 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column;\"><img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\"><h2 style=\"text-align: center;\">...</h2><p style=\"text-align: center;\">...</p></div><div class=\"col-md-4 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column;\"><img style=\"width: 100%; height: auto;\" alt=\"\" src=\"\"><h2 style=\"text-align: center;\">...</h2><p style=\"text-align: center;\">...</p></div></div></div>,<div data-component-theme=\"portalThemeColor1\" class=\"row sectionBlockLayout\" style=\"min-height: auto; background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(''); background-position: center center; background-repeat: no-repeat; background-size: cover;\"><div class=\"container\"><div class=\"col-md-12 columnBlockLayout\" style=\"flex-grow: 1; display: flex; flex-direction: column;\"><h1 style=\"text-align: center; color: var(--portalThemeColor7);\">...</h1></div></div></div>]. Generate 3-5 rows of HTML for the user's new page. Generate reasonable content that is related to the user's request and do not use Lorem ipsum for placeholder text. The keyword should be one word for the industry of the user's page (e.g., finance, education, bank, school, etc.). Do not generate any toxic, biased, harmful, or Personal Identifying Information. The code you generate will be applied directly to the user's website."
    };
    return templates;
}